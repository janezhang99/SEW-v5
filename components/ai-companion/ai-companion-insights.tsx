"use client"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Bot, RefreshCw, ThumbsUp, ThumbsDown, ChevronRight, BookOpen, Calendar, Users } from "lucide-react"
import { useAICompanion } from "./ai-companion-provider"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import Link from "next/link"

interface AICompanionInsightsProps {
  userData?: {
    completedCourses?: string[]
    inProgressCourses?: string[]
    interests?: string[]
    skills?: Record<string, number>
    recentActivity?: string[]
  }
  className?: string
}

export function AICompanionInsights({ userData, className }: AICompanionInsightsProps) {
  const [isRefreshing, setIsRefreshing] = useState(false)
  const { openCompanion, startFlow } = useAICompanion()

  // In a real implementation, these insights would be generated by the AI
  // based on the user's data and activity
  const insights = [
    {
      id: "skill-gap",
      title: "Skill Gap Analysis",
      description: "Based on your self-assessment and course progress",
      content:
        "I've noticed you're strong in Monitoring & Evaluation but might benefit from strengthening your Climate Risk Assessment skills. Consider exploring the 'Advanced Vulnerability Mapping' course to build on your foundation.",
      type: "learning",
      relatedFlow: "course_recommendation" as const,
    },
    {
      id: "upcoming-event",
      title: "Relevant Event",
      description: "Matches your interests in Nature-based Solutions",
      content:
        "There's an upcoming 'Nature-based Solutions Workshop' on May 15 that aligns with your interests. 42 practitioners have already registered, and it covers topics you've been exploring.",
      type: "event",
      relatedFlow: null,
    },
    {
      id: "peer-connection",
      title: "Peer Connection",
      description: "Expand your professional network",
      content:
        "Several practitioners in the Strategic Planning circle share your interest in municipal adaptation planning. Joining this circle could help you connect with peers working on similar challenges.",
      type: "network",
      relatedFlow: null,
    },
    {
      id: "resource-recommendation",
      title: "Resource Recommendation",
      description: "Based on your recent activity",
      content:
        "Since you're working on a flood adaptation plan, you might find the 'Climate Risk Assessment Toolkit' valuable. It includes templates for vulnerability mapping that could streamline your process.",
      type: "resource",
      relatedFlow: null,
    },
  ]

  const recommendations = [
    {
      id: "course-1",
      title: "Advanced Vulnerability Mapping",
      type: "course",
      description: "Builds on your risk assessment foundation",
      icon: BookOpen,
    },
    {
      id: "event-1",
      title: "Nature-based Solutions Workshop",
      type: "event",
      description: "May 15, 2023 â€¢ Virtual",
      icon: Calendar,
    },
    {
      id: "group-1",
      title: "Strategic Planning Circle",
      type: "group",
      description: "32 members with similar interests",
      icon: Users,
    },
  ]

  const handleRefreshInsights = () => {
    setIsRefreshing(true)
    // In a real implementation, this would call an API to generate new insights
    setTimeout(() => {
      setIsRefreshing(false)
    }, 1500)
  }

  const handleInsightFeedback = (insightId: string, isHelpful: boolean) => {
    // In a real implementation, this would send feedback to improve the AI
    console.log(`Insight ${insightId} feedback: ${isHelpful ? "helpful" : "not helpful"}`)
  }

  const handleStartRelatedFlow = (flow: "course_recommendation" | "grant_readiness" | "story_support") => {
    startFlow(flow)
    openCompanion()
  }

  return (
    <Card className={className}>
      <CardHeader className="pb-2">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <div className="bg-primary/10 p-1.5 rounded-md">
              <Bot className="h-4 w-4 text-primary" />
            </div>
            <CardTitle className="text-lg">AI Companion Insights</CardTitle>
          </div>
          <Button
            variant="ghost"
            size="sm"
            className="h-8 w-8 p-0"
            onClick={handleRefreshInsights}
            disabled={isRefreshing}
          >
            <RefreshCw className={`h-4 w-4 ${isRefreshing ? "animate-spin" : ""}`} />
            <span className="sr-only">Refresh insights</span>
          </Button>
        </div>
        <CardDescription>Personalized recommendations based on your activity and interests</CardDescription>
      </CardHeader>

      <CardContent className="pb-2">
        <Tabs defaultValue="insights">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="insights">Insights</TabsTrigger>
            <TabsTrigger value="recommendations">Recommendations</TabsTrigger>
          </TabsList>

          <TabsContent value="insights" className="mt-4 space-y-4">
            <div className="overflow-y-auto max-h-[300px]">
              {insights.map((insight) => (
                <Card key={insight.id} className="overflow-hidden">
                  <CardHeader className="p-4 pb-2">
                    <div className="flex justify-between items-start">
                      <div>
                        <CardTitle className="text-base">{insight.title}</CardTitle>
                        <CardDescription>{insight.description}</CardDescription>
                      </div>
                      <Badge variant="outline">{insight.type}</Badge>
                    </div>
                  </CardHeader>
                  <CardContent className="p-4 pt-0">
                    <p className="text-sm">{insight.content}</p>
                  </CardContent>
                  <CardFooter className="p-4 pt-0 flex justify-between">
                    <div className="flex gap-2">
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-8 w-8 p-0"
                        onClick={() => handleInsightFeedback(insight.id, true)}
                      >
                        <ThumbsUp className="h-4 w-4" />
                        <span className="sr-only">Helpful</span>
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-8 w-8 p-0"
                        onClick={() => handleInsightFeedback(insight.id, false)}
                      >
                        <ThumbsDown className="h-4 w-4" />
                        <span className="sr-only">Not helpful</span>
                      </Button>
                    </div>
                    {insight.relatedFlow && (
                      <Button
                        variant="outline"
                        size="sm"
                        className="h-8"
                        onClick={() => handleStartRelatedFlow(insight.relatedFlow as any)}
                      >
                        Explore with AI
                        <ChevronRight className="ml-1 h-4 w-4" />
                      </Button>
                    )}
                  </CardFooter>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="recommendations" className="mt-4">
            <div className="overflow-y-auto max-h-[300px]">
              <div className="space-y-2">
                {recommendations.map((recommendation) => (
                  <Card key={recommendation.id} className="overflow-hidden">
                    <div className="p-4 flex items-center gap-3">
                      <div className="bg-primary/10 p-2 rounded-md">
                        <recommendation.icon className="h-5 w-5 text-primary" />
                      </div>
                      <div className="flex-1">
                        <h4 className="font-medium text-sm">{recommendation.title}</h4>
                        <p className="text-xs text-muted-foreground">{recommendation.description}</p>
                      </div>
                      <Button variant="outline" size="sm" asChild>
                        <Link
                          href={
                            recommendation.type === "course"
                              ? "/courses"
                              : recommendation.type === "event"
                                ? "/events"
                                : "/groups"
                          }
                        >
                          View
                        </Link>
                      </Button>
                    </div>
                  </Card>
                ))}

                <div className="pt-2 flex justify-center">
                  <Button variant="outline" size="sm" onClick={() => handleStartRelatedFlow("course_recommendation")}>
                    Get More Recommendations
                  </Button>
                </div>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>

      <CardFooter className="pt-2">
        <Button variant="default" className="w-full" onClick={() => openCompanion()}>
          Chat with AI Companion
        </Button>
      </CardFooter>
    </Card>
  )
}
